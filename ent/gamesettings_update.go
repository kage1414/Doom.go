// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"doomlike/ent/gamesettings"
	"doomlike/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameSettingsUpdate is the builder for updating GameSettings entities.
type GameSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *GameSettingsMutation
}

// Where appends a list predicates to the GameSettingsUpdate builder.
func (_u *GameSettingsUpdate) Where(ps ...predicate.GameSettings) *GameSettingsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFireRate sets the "fire_rate" field.
func (_u *GameSettingsUpdate) SetFireRate(v float64) *GameSettingsUpdate {
	_u.mutation.ResetFireRate()
	_u.mutation.SetFireRate(v)
	return _u
}

// SetNillableFireRate sets the "fire_rate" field if the given value is not nil.
func (_u *GameSettingsUpdate) SetNillableFireRate(v *float64) *GameSettingsUpdate {
	if v != nil {
		_u.SetFireRate(*v)
	}
	return _u
}

// AddFireRate adds value to the "fire_rate" field.
func (_u *GameSettingsUpdate) AddFireRate(v float64) *GameSettingsUpdate {
	_u.mutation.AddFireRate(v)
	return _u
}

// SetBulletSpeed sets the "bullet_speed" field.
func (_u *GameSettingsUpdate) SetBulletSpeed(v float64) *GameSettingsUpdate {
	_u.mutation.ResetBulletSpeed()
	_u.mutation.SetBulletSpeed(v)
	return _u
}

// SetNillableBulletSpeed sets the "bullet_speed" field if the given value is not nil.
func (_u *GameSettingsUpdate) SetNillableBulletSpeed(v *float64) *GameSettingsUpdate {
	if v != nil {
		_u.SetBulletSpeed(*v)
	}
	return _u
}

// AddBulletSpeed adds value to the "bullet_speed" field.
func (_u *GameSettingsUpdate) AddBulletSpeed(v float64) *GameSettingsUpdate {
	_u.mutation.AddBulletSpeed(v)
	return _u
}

// SetLevelCount sets the "level_count" field.
func (_u *GameSettingsUpdate) SetLevelCount(v int) *GameSettingsUpdate {
	_u.mutation.ResetLevelCount()
	_u.mutation.SetLevelCount(v)
	return _u
}

// SetNillableLevelCount sets the "level_count" field if the given value is not nil.
func (_u *GameSettingsUpdate) SetNillableLevelCount(v *int) *GameSettingsUpdate {
	if v != nil {
		_u.SetLevelCount(*v)
	}
	return _u
}

// AddLevelCount adds value to the "level_count" field.
func (_u *GameSettingsUpdate) AddLevelCount(v int) *GameSettingsUpdate {
	_u.mutation.AddLevelCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GameSettingsUpdate) SetCreatedAt(v time.Time) *GameSettingsUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GameSettingsUpdate) SetNillableCreatedAt(v *time.Time) *GameSettingsUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *GameSettingsUpdate) ClearCreatedAt() *GameSettingsUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GameSettingsUpdate) SetUpdatedAt(v time.Time) *GameSettingsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *GameSettingsUpdate) SetNillableUpdatedAt(v *time.Time) *GameSettingsUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GameSettingsUpdate) ClearUpdatedAt() *GameSettingsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// Mutation returns the GameSettingsMutation object of the builder.
func (_u *GameSettingsUpdate) Mutation() *GameSettingsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GameSettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GameSettingsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameSettingsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GameSettingsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamesettings.Table, gamesettings.Columns, sqlgraph.NewFieldSpec(gamesettings.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FireRate(); ok {
		_spec.SetField(gamesettings.FieldFireRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFireRate(); ok {
		_spec.AddField(gamesettings.FieldFireRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BulletSpeed(); ok {
		_spec.SetField(gamesettings.FieldBulletSpeed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBulletSpeed(); ok {
		_spec.AddField(gamesettings.FieldBulletSpeed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.LevelCount(); ok {
		_spec.SetField(gamesettings.FieldLevelCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevelCount(); ok {
		_spec.AddField(gamesettings.FieldLevelCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(gamesettings.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(gamesettings.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(gamesettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(gamesettings.FieldUpdatedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamesettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GameSettingsUpdateOne is the builder for updating a single GameSettings entity.
type GameSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameSettingsMutation
}

// SetFireRate sets the "fire_rate" field.
func (_u *GameSettingsUpdateOne) SetFireRate(v float64) *GameSettingsUpdateOne {
	_u.mutation.ResetFireRate()
	_u.mutation.SetFireRate(v)
	return _u
}

// SetNillableFireRate sets the "fire_rate" field if the given value is not nil.
func (_u *GameSettingsUpdateOne) SetNillableFireRate(v *float64) *GameSettingsUpdateOne {
	if v != nil {
		_u.SetFireRate(*v)
	}
	return _u
}

// AddFireRate adds value to the "fire_rate" field.
func (_u *GameSettingsUpdateOne) AddFireRate(v float64) *GameSettingsUpdateOne {
	_u.mutation.AddFireRate(v)
	return _u
}

// SetBulletSpeed sets the "bullet_speed" field.
func (_u *GameSettingsUpdateOne) SetBulletSpeed(v float64) *GameSettingsUpdateOne {
	_u.mutation.ResetBulletSpeed()
	_u.mutation.SetBulletSpeed(v)
	return _u
}

// SetNillableBulletSpeed sets the "bullet_speed" field if the given value is not nil.
func (_u *GameSettingsUpdateOne) SetNillableBulletSpeed(v *float64) *GameSettingsUpdateOne {
	if v != nil {
		_u.SetBulletSpeed(*v)
	}
	return _u
}

// AddBulletSpeed adds value to the "bullet_speed" field.
func (_u *GameSettingsUpdateOne) AddBulletSpeed(v float64) *GameSettingsUpdateOne {
	_u.mutation.AddBulletSpeed(v)
	return _u
}

// SetLevelCount sets the "level_count" field.
func (_u *GameSettingsUpdateOne) SetLevelCount(v int) *GameSettingsUpdateOne {
	_u.mutation.ResetLevelCount()
	_u.mutation.SetLevelCount(v)
	return _u
}

// SetNillableLevelCount sets the "level_count" field if the given value is not nil.
func (_u *GameSettingsUpdateOne) SetNillableLevelCount(v *int) *GameSettingsUpdateOne {
	if v != nil {
		_u.SetLevelCount(*v)
	}
	return _u
}

// AddLevelCount adds value to the "level_count" field.
func (_u *GameSettingsUpdateOne) AddLevelCount(v int) *GameSettingsUpdateOne {
	_u.mutation.AddLevelCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GameSettingsUpdateOne) SetCreatedAt(v time.Time) *GameSettingsUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GameSettingsUpdateOne) SetNillableCreatedAt(v *time.Time) *GameSettingsUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *GameSettingsUpdateOne) ClearCreatedAt() *GameSettingsUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GameSettingsUpdateOne) SetUpdatedAt(v time.Time) *GameSettingsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *GameSettingsUpdateOne) SetNillableUpdatedAt(v *time.Time) *GameSettingsUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GameSettingsUpdateOne) ClearUpdatedAt() *GameSettingsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// Mutation returns the GameSettingsMutation object of the builder.
func (_u *GameSettingsUpdateOne) Mutation() *GameSettingsMutation {
	return _u.mutation
}

// Where appends a list predicates to the GameSettingsUpdate builder.
func (_u *GameSettingsUpdateOne) Where(ps ...predicate.GameSettings) *GameSettingsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GameSettingsUpdateOne) Select(field string, fields ...string) *GameSettingsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GameSettings entity.
func (_u *GameSettingsUpdateOne) Save(ctx context.Context) (*GameSettings, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameSettingsUpdateOne) SaveX(ctx context.Context) *GameSettings {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GameSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GameSettingsUpdateOne) sqlSave(ctx context.Context) (_node *GameSettings, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamesettings.Table, gamesettings.Columns, sqlgraph.NewFieldSpec(gamesettings.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamesettings.FieldID)
		for _, f := range fields {
			if !gamesettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gamesettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FireRate(); ok {
		_spec.SetField(gamesettings.FieldFireRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFireRate(); ok {
		_spec.AddField(gamesettings.FieldFireRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BulletSpeed(); ok {
		_spec.SetField(gamesettings.FieldBulletSpeed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBulletSpeed(); ok {
		_spec.AddField(gamesettings.FieldBulletSpeed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.LevelCount(); ok {
		_spec.SetField(gamesettings.FieldLevelCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevelCount(); ok {
		_spec.AddField(gamesettings.FieldLevelCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(gamesettings.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(gamesettings.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(gamesettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(gamesettings.FieldUpdatedAt, field.TypeTime)
	}
	_node = &GameSettings{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamesettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
