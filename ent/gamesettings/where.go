// Code generated by ent, DO NOT EDIT.

package gamesettings

import (
	"doomlike/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldContainsFold(FieldID, id))
}

// FireRate applies equality check predicate on the "fire_rate" field. It's identical to FireRateEQ.
func FireRate(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldFireRate, v))
}

// BulletSpeed applies equality check predicate on the "bullet_speed" field. It's identical to BulletSpeedEQ.
func BulletSpeed(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldBulletSpeed, v))
}

// LevelCount applies equality check predicate on the "level_count" field. It's identical to LevelCountEQ.
func LevelCount(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldLevelCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldUpdatedAt, v))
}

// FireRateEQ applies the EQ predicate on the "fire_rate" field.
func FireRateEQ(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldFireRate, v))
}

// FireRateNEQ applies the NEQ predicate on the "fire_rate" field.
func FireRateNEQ(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldFireRate, v))
}

// FireRateIn applies the In predicate on the "fire_rate" field.
func FireRateIn(vs ...float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldFireRate, vs...))
}

// FireRateNotIn applies the NotIn predicate on the "fire_rate" field.
func FireRateNotIn(vs ...float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldFireRate, vs...))
}

// FireRateGT applies the GT predicate on the "fire_rate" field.
func FireRateGT(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldFireRate, v))
}

// FireRateGTE applies the GTE predicate on the "fire_rate" field.
func FireRateGTE(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldFireRate, v))
}

// FireRateLT applies the LT predicate on the "fire_rate" field.
func FireRateLT(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldFireRate, v))
}

// FireRateLTE applies the LTE predicate on the "fire_rate" field.
func FireRateLTE(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldFireRate, v))
}

// BulletSpeedEQ applies the EQ predicate on the "bullet_speed" field.
func BulletSpeedEQ(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldBulletSpeed, v))
}

// BulletSpeedNEQ applies the NEQ predicate on the "bullet_speed" field.
func BulletSpeedNEQ(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldBulletSpeed, v))
}

// BulletSpeedIn applies the In predicate on the "bullet_speed" field.
func BulletSpeedIn(vs ...float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldBulletSpeed, vs...))
}

// BulletSpeedNotIn applies the NotIn predicate on the "bullet_speed" field.
func BulletSpeedNotIn(vs ...float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldBulletSpeed, vs...))
}

// BulletSpeedGT applies the GT predicate on the "bullet_speed" field.
func BulletSpeedGT(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldBulletSpeed, v))
}

// BulletSpeedGTE applies the GTE predicate on the "bullet_speed" field.
func BulletSpeedGTE(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldBulletSpeed, v))
}

// BulletSpeedLT applies the LT predicate on the "bullet_speed" field.
func BulletSpeedLT(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldBulletSpeed, v))
}

// BulletSpeedLTE applies the LTE predicate on the "bullet_speed" field.
func BulletSpeedLTE(v float64) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldBulletSpeed, v))
}

// LevelCountEQ applies the EQ predicate on the "level_count" field.
func LevelCountEQ(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldLevelCount, v))
}

// LevelCountNEQ applies the NEQ predicate on the "level_count" field.
func LevelCountNEQ(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldLevelCount, v))
}

// LevelCountIn applies the In predicate on the "level_count" field.
func LevelCountIn(vs ...int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldLevelCount, vs...))
}

// LevelCountNotIn applies the NotIn predicate on the "level_count" field.
func LevelCountNotIn(vs ...int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldLevelCount, vs...))
}

// LevelCountGT applies the GT predicate on the "level_count" field.
func LevelCountGT(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldLevelCount, v))
}

// LevelCountGTE applies the GTE predicate on the "level_count" field.
func LevelCountGTE(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldLevelCount, v))
}

// LevelCountLT applies the LT predicate on the "level_count" field.
func LevelCountLT(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldLevelCount, v))
}

// LevelCountLTE applies the LTE predicate on the "level_count" field.
func LevelCountLTE(v int) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldLevelCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GameSettings {
	return predicate.GameSettings(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GameSettings {
	return predicate.GameSettings(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GameSettings {
	return predicate.GameSettings(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameSettings) predicate.GameSettings {
	return predicate.GameSettings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameSettings) predicate.GameSettings {
	return predicate.GameSettings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameSettings) predicate.GameSettings {
	return predicate.GameSettings(sql.NotPredicates(p))
}
