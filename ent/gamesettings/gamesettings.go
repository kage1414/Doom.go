// Code generated by ent, DO NOT EDIT.

package gamesettings

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the gamesettings type in the database.
	Label = "game_settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFireRate holds the string denoting the fire_rate field in the database.
	FieldFireRate = "fire_rate"
	// FieldBulletSpeed holds the string denoting the bullet_speed field in the database.
	FieldBulletSpeed = "bullet_speed"
	// FieldLevelCount holds the string denoting the level_count field in the database.
	FieldLevelCount = "level_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the gamesettings in the database.
	Table = "game_settings"
)

// Columns holds all SQL columns for gamesettings fields.
var Columns = []string{
	FieldID,
	FieldFireRate,
	FieldBulletSpeed,
	FieldLevelCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFireRate holds the default value on creation for the "fire_rate" field.
	DefaultFireRate float64
	// DefaultBulletSpeed holds the default value on creation for the "bullet_speed" field.
	DefaultBulletSpeed float64
	// DefaultLevelCount holds the default value on creation for the "level_count" field.
	DefaultLevelCount int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID string
)

// OrderOption defines the ordering options for the GameSettings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFireRate orders the results by the fire_rate field.
func ByFireRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFireRate, opts...).ToFunc()
}

// ByBulletSpeed orders the results by the bullet_speed field.
func ByBulletSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBulletSpeed, opts...).ToFunc()
}

// ByLevelCount orders the results by the level_count field.
func ByLevelCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
