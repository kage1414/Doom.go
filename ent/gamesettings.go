// Code generated by ent, DO NOT EDIT.

package ent

import (
	"doomlike/ent/gamesettings"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GameSettings is the model entity for the GameSettings schema.
type GameSettings struct {
	config `json:"-"`
	// ID of the ent.
	// Settings ID - using 'default' for main settings
	ID string `json:"id,omitempty"`
	// Fire rate in seconds between shots
	FireRate float64 `json:"fire_rate,omitempty"`
	// Bullet speed multiplier
	BulletSpeed float64 `json:"bullet_speed,omitempty"`
	// Number of levels to play
	LevelCount int `json:"level_count,omitempty"`
	// When these settings were created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// When these settings were last updated
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamesettings.FieldFireRate, gamesettings.FieldBulletSpeed:
			values[i] = new(sql.NullFloat64)
		case gamesettings.FieldLevelCount:
			values[i] = new(sql.NullInt64)
		case gamesettings.FieldID:
			values[i] = new(sql.NullString)
		case gamesettings.FieldCreatedAt, gamesettings.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameSettings fields.
func (_m *GameSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamesettings.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case gamesettings.FieldFireRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fire_rate", values[i])
			} else if value.Valid {
				_m.FireRate = value.Float64
			}
		case gamesettings.FieldBulletSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bullet_speed", values[i])
			} else if value.Valid {
				_m.BulletSpeed = value.Float64
			}
		case gamesettings.FieldLevelCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_count", values[i])
			} else if value.Valid {
				_m.LevelCount = int(value.Int64)
			}
		case gamesettings.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case gamesettings.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameSettings.
// This includes values selected through modifiers, order, etc.
func (_m *GameSettings) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this GameSettings.
// Note that you need to call GameSettings.Unwrap() before calling this method if this GameSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GameSettings) Update() *GameSettingsUpdateOne {
	return NewGameSettingsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GameSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GameSettings) Unwrap() *GameSettings {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameSettings is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GameSettings) String() string {
	var builder strings.Builder
	builder.WriteString("GameSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("fire_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.FireRate))
	builder.WriteString(", ")
	builder.WriteString("bullet_speed=")
	builder.WriteString(fmt.Sprintf("%v", _m.BulletSpeed))
	builder.WriteString(", ")
	builder.WriteString("level_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LevelCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GameSettingsSlice is a parsable slice of GameSettings.
type GameSettingsSlice []*GameSettings
