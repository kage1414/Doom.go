// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"doomlike/ent/gamesettings"
	"doomlike/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGameSettings = "GameSettings"
)

// GameSettingsMutation represents an operation that mutates the GameSettings nodes in the graph.
type GameSettingsMutation struct {
	config
	op              Op
	typ             string
	id              *string
	fire_rate       *float64
	addfire_rate    *float64
	bullet_speed    *float64
	addbullet_speed *float64
	level_count     *int
	addlevel_count  *int
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*GameSettings, error)
	predicates      []predicate.GameSettings
}

var _ ent.Mutation = (*GameSettingsMutation)(nil)

// gamesettingsOption allows management of the mutation configuration using functional options.
type gamesettingsOption func(*GameSettingsMutation)

// newGameSettingsMutation creates new mutation for the GameSettings entity.
func newGameSettingsMutation(c config, op Op, opts ...gamesettingsOption) *GameSettingsMutation {
	m := &GameSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeGameSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameSettingsID sets the ID field of the mutation.
func withGameSettingsID(id string) gamesettingsOption {
	return func(m *GameSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *GameSettings
		)
		m.oldValue = func(ctx context.Context) (*GameSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGameSettings sets the old GameSettings of the mutation.
func withGameSettings(node *GameSettings) gamesettingsOption {
	return func(m *GameSettingsMutation) {
		m.oldValue = func(context.Context) (*GameSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameSettings entities.
func (m *GameSettingsMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameSettingsMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameSettingsMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFireRate sets the "fire_rate" field.
func (m *GameSettingsMutation) SetFireRate(f float64) {
	m.fire_rate = &f
	m.addfire_rate = nil
}

// FireRate returns the value of the "fire_rate" field in the mutation.
func (m *GameSettingsMutation) FireRate() (r float64, exists bool) {
	v := m.fire_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFireRate returns the old "fire_rate" field's value of the GameSettings entity.
// If the GameSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameSettingsMutation) OldFireRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFireRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFireRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFireRate: %w", err)
	}
	return oldValue.FireRate, nil
}

// AddFireRate adds f to the "fire_rate" field.
func (m *GameSettingsMutation) AddFireRate(f float64) {
	if m.addfire_rate != nil {
		*m.addfire_rate += f
	} else {
		m.addfire_rate = &f
	}
}

// AddedFireRate returns the value that was added to the "fire_rate" field in this mutation.
func (m *GameSettingsMutation) AddedFireRate() (r float64, exists bool) {
	v := m.addfire_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFireRate resets all changes to the "fire_rate" field.
func (m *GameSettingsMutation) ResetFireRate() {
	m.fire_rate = nil
	m.addfire_rate = nil
}

// SetBulletSpeed sets the "bullet_speed" field.
func (m *GameSettingsMutation) SetBulletSpeed(f float64) {
	m.bullet_speed = &f
	m.addbullet_speed = nil
}

// BulletSpeed returns the value of the "bullet_speed" field in the mutation.
func (m *GameSettingsMutation) BulletSpeed() (r float64, exists bool) {
	v := m.bullet_speed
	if v == nil {
		return
	}
	return *v, true
}

// OldBulletSpeed returns the old "bullet_speed" field's value of the GameSettings entity.
// If the GameSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameSettingsMutation) OldBulletSpeed(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBulletSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBulletSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBulletSpeed: %w", err)
	}
	return oldValue.BulletSpeed, nil
}

// AddBulletSpeed adds f to the "bullet_speed" field.
func (m *GameSettingsMutation) AddBulletSpeed(f float64) {
	if m.addbullet_speed != nil {
		*m.addbullet_speed += f
	} else {
		m.addbullet_speed = &f
	}
}

// AddedBulletSpeed returns the value that was added to the "bullet_speed" field in this mutation.
func (m *GameSettingsMutation) AddedBulletSpeed() (r float64, exists bool) {
	v := m.addbullet_speed
	if v == nil {
		return
	}
	return *v, true
}

// ResetBulletSpeed resets all changes to the "bullet_speed" field.
func (m *GameSettingsMutation) ResetBulletSpeed() {
	m.bullet_speed = nil
	m.addbullet_speed = nil
}

// SetLevelCount sets the "level_count" field.
func (m *GameSettingsMutation) SetLevelCount(i int) {
	m.level_count = &i
	m.addlevel_count = nil
}

// LevelCount returns the value of the "level_count" field in the mutation.
func (m *GameSettingsMutation) LevelCount() (r int, exists bool) {
	v := m.level_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLevelCount returns the old "level_count" field's value of the GameSettings entity.
// If the GameSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameSettingsMutation) OldLevelCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevelCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevelCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevelCount: %w", err)
	}
	return oldValue.LevelCount, nil
}

// AddLevelCount adds i to the "level_count" field.
func (m *GameSettingsMutation) AddLevelCount(i int) {
	if m.addlevel_count != nil {
		*m.addlevel_count += i
	} else {
		m.addlevel_count = &i
	}
}

// AddedLevelCount returns the value that was added to the "level_count" field in this mutation.
func (m *GameSettingsMutation) AddedLevelCount() (r int, exists bool) {
	v := m.addlevel_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevelCount resets all changes to the "level_count" field.
func (m *GameSettingsMutation) ResetLevelCount() {
	m.level_count = nil
	m.addlevel_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GameSettingsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GameSettingsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GameSettings entity.
// If the GameSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameSettingsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *GameSettingsMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[gamesettings.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *GameSettingsMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[gamesettings.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GameSettingsMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, gamesettings.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GameSettingsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GameSettingsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GameSettings entity.
// If the GameSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameSettingsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *GameSettingsMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[gamesettings.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *GameSettingsMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[gamesettings.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GameSettingsMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, gamesettings.FieldUpdatedAt)
}

// Where appends a list predicates to the GameSettingsMutation builder.
func (m *GameSettingsMutation) Where(ps ...predicate.GameSettings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameSettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameSettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameSettings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameSettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameSettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameSettings).
func (m *GameSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameSettingsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.fire_rate != nil {
		fields = append(fields, gamesettings.FieldFireRate)
	}
	if m.bullet_speed != nil {
		fields = append(fields, gamesettings.FieldBulletSpeed)
	}
	if m.level_count != nil {
		fields = append(fields, gamesettings.FieldLevelCount)
	}
	if m.created_at != nil {
		fields = append(fields, gamesettings.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, gamesettings.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gamesettings.FieldFireRate:
		return m.FireRate()
	case gamesettings.FieldBulletSpeed:
		return m.BulletSpeed()
	case gamesettings.FieldLevelCount:
		return m.LevelCount()
	case gamesettings.FieldCreatedAt:
		return m.CreatedAt()
	case gamesettings.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gamesettings.FieldFireRate:
		return m.OldFireRate(ctx)
	case gamesettings.FieldBulletSpeed:
		return m.OldBulletSpeed(ctx)
	case gamesettings.FieldLevelCount:
		return m.OldLevelCount(ctx)
	case gamesettings.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case gamesettings.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GameSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gamesettings.FieldFireRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFireRate(v)
		return nil
	case gamesettings.FieldBulletSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBulletSpeed(v)
		return nil
	case gamesettings.FieldLevelCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevelCount(v)
		return nil
	case gamesettings.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case gamesettings.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GameSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameSettingsMutation) AddedFields() []string {
	var fields []string
	if m.addfire_rate != nil {
		fields = append(fields, gamesettings.FieldFireRate)
	}
	if m.addbullet_speed != nil {
		fields = append(fields, gamesettings.FieldBulletSpeed)
	}
	if m.addlevel_count != nil {
		fields = append(fields, gamesettings.FieldLevelCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameSettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gamesettings.FieldFireRate:
		return m.AddedFireRate()
	case gamesettings.FieldBulletSpeed:
		return m.AddedBulletSpeed()
	case gamesettings.FieldLevelCount:
		return m.AddedLevelCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gamesettings.FieldFireRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFireRate(v)
		return nil
	case gamesettings.FieldBulletSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBulletSpeed(v)
		return nil
	case gamesettings.FieldLevelCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevelCount(v)
		return nil
	}
	return fmt.Errorf("unknown GameSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameSettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gamesettings.FieldCreatedAt) {
		fields = append(fields, gamesettings.FieldCreatedAt)
	}
	if m.FieldCleared(gamesettings.FieldUpdatedAt) {
		fields = append(fields, gamesettings.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameSettingsMutation) ClearField(name string) error {
	switch name {
	case gamesettings.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case gamesettings.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GameSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameSettingsMutation) ResetField(name string) error {
	switch name {
	case gamesettings.FieldFireRate:
		m.ResetFireRate()
		return nil
	case gamesettings.FieldBulletSpeed:
		m.ResetBulletSpeed()
		return nil
	case gamesettings.FieldLevelCount:
		m.ResetLevelCount()
		return nil
	case gamesettings.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case gamesettings.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GameSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameSettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameSettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameSettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameSettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GameSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameSettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GameSettings edge %s", name)
}
