// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"doomlike/ent/gamesettings"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameSettingsCreate is the builder for creating a GameSettings entity.
type GameSettingsCreate struct {
	config
	mutation *GameSettingsMutation
	hooks    []Hook
}

// SetFireRate sets the "fire_rate" field.
func (_c *GameSettingsCreate) SetFireRate(v float64) *GameSettingsCreate {
	_c.mutation.SetFireRate(v)
	return _c
}

// SetNillableFireRate sets the "fire_rate" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableFireRate(v *float64) *GameSettingsCreate {
	if v != nil {
		_c.SetFireRate(*v)
	}
	return _c
}

// SetBulletSpeed sets the "bullet_speed" field.
func (_c *GameSettingsCreate) SetBulletSpeed(v float64) *GameSettingsCreate {
	_c.mutation.SetBulletSpeed(v)
	return _c
}

// SetNillableBulletSpeed sets the "bullet_speed" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableBulletSpeed(v *float64) *GameSettingsCreate {
	if v != nil {
		_c.SetBulletSpeed(*v)
	}
	return _c
}

// SetLevelCount sets the "level_count" field.
func (_c *GameSettingsCreate) SetLevelCount(v int) *GameSettingsCreate {
	_c.mutation.SetLevelCount(v)
	return _c
}

// SetNillableLevelCount sets the "level_count" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableLevelCount(v *int) *GameSettingsCreate {
	if v != nil {
		_c.SetLevelCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GameSettingsCreate) SetCreatedAt(v time.Time) *GameSettingsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableCreatedAt(v *time.Time) *GameSettingsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GameSettingsCreate) SetUpdatedAt(v time.Time) *GameSettingsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableUpdatedAt(v *time.Time) *GameSettingsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GameSettingsCreate) SetID(v string) *GameSettingsCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *GameSettingsCreate) SetNillableID(v *string) *GameSettingsCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the GameSettingsMutation object of the builder.
func (_c *GameSettingsCreate) Mutation() *GameSettingsMutation {
	return _c.mutation
}

// Save creates the GameSettings in the database.
func (_c *GameSettingsCreate) Save(ctx context.Context) (*GameSettings, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GameSettingsCreate) SaveX(ctx context.Context) *GameSettings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GameSettingsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GameSettingsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GameSettingsCreate) defaults() {
	if _, ok := _c.mutation.FireRate(); !ok {
		v := gamesettings.DefaultFireRate
		_c.mutation.SetFireRate(v)
	}
	if _, ok := _c.mutation.BulletSpeed(); !ok {
		v := gamesettings.DefaultBulletSpeed
		_c.mutation.SetBulletSpeed(v)
	}
	if _, ok := _c.mutation.LevelCount(); !ok {
		v := gamesettings.DefaultLevelCount
		_c.mutation.SetLevelCount(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := gamesettings.DefaultID
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GameSettingsCreate) check() error {
	if _, ok := _c.mutation.FireRate(); !ok {
		return &ValidationError{Name: "fire_rate", err: errors.New(`ent: missing required field "GameSettings.fire_rate"`)}
	}
	if _, ok := _c.mutation.BulletSpeed(); !ok {
		return &ValidationError{Name: "bullet_speed", err: errors.New(`ent: missing required field "GameSettings.bullet_speed"`)}
	}
	if _, ok := _c.mutation.LevelCount(); !ok {
		return &ValidationError{Name: "level_count", err: errors.New(`ent: missing required field "GameSettings.level_count"`)}
	}
	return nil
}

func (_c *GameSettingsCreate) sqlSave(ctx context.Context) (*GameSettings, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GameSettings.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GameSettingsCreate) createSpec() (*GameSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &GameSettings{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(gamesettings.Table, sqlgraph.NewFieldSpec(gamesettings.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.FireRate(); ok {
		_spec.SetField(gamesettings.FieldFireRate, field.TypeFloat64, value)
		_node.FireRate = value
	}
	if value, ok := _c.mutation.BulletSpeed(); ok {
		_spec.SetField(gamesettings.FieldBulletSpeed, field.TypeFloat64, value)
		_node.BulletSpeed = value
	}
	if value, ok := _c.mutation.LevelCount(); ok {
		_spec.SetField(gamesettings.FieldLevelCount, field.TypeInt, value)
		_node.LevelCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(gamesettings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(gamesettings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// GameSettingsCreateBulk is the builder for creating many GameSettings entities in bulk.
type GameSettingsCreateBulk struct {
	config
	err      error
	builders []*GameSettingsCreate
}

// Save creates the GameSettings entities in the database.
func (_c *GameSettingsCreateBulk) Save(ctx context.Context) ([]*GameSettings, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*GameSettings, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GameSettingsCreateBulk) SaveX(ctx context.Context) []*GameSettings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GameSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GameSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
